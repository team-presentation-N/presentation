●Gitとは
2005年に開発された分散型バージョン管理システム

     git   ：英語で"ばか者","ろくでなし"の意

   分散型  ：各ユーザのワーキングディレクトリに全ての履歴が複製されている
             ネットワークに接続できない状態でも履歴の参照、変更の記録などが行える

 リポジトリ：プロジェクトに関連するソースコード・ファイル・データを一元的に管理する格納場所
             Gitにおいては".git"という名前のディレクトリを指す
             "ローカルリポジトリ"と"リモートリポジトリ"が存在する

   GitHub  ：アメリカのGitHub社が提供するweb上のソフトウェア開発プラットフォーム
             Git機能を提供している、ブラウザから操作できるなどの特徴がある
             GitHubをリモートリポジトリとして利用することで、簡単にファイル共有が可能


●Gitにおける作業のステップ
	1,clone  中心リポジトリをローカルに複製する

	2,commit ローカルで行われたデータの変更を、ローカルリポジトリに反映させる
	         ローカルリポジトリに保存された過去の状態を閲覧・復元する

	3,push   ローカルリポジトリの変更内容を中心リポジトリに反映させる

	4,pull   中心リポジトリが更新された場合、ローカルリポジトリにもその更新を反映させる
                 "fetch"と"merge"という2つの処理が内部で行われる


●Git(分散型バージョン管理システム)のメリット
・複数のユーザ間で変更履歴の共有が可能
・以前のバージョンへの巻き戻しが可能
・プロジェクトに関連する全ての要素を一括して管理できる


●重要な語句や操作
・リビジョン  ：リポジトリに蓄積される変更履歴のこと
                以下を含む
                 -リビジョン番号
                 -対象の変更情報
                 -commitしたユーザ名
                 -commitした日時
                 -変更時のメッセージ(メモ書き)

・ブランチ    ：リポジトリの持つ階層のこと
                全てのリビジョンはいずれかのブランチに属する
                   リポジトリ - ブランチa - リビジョンa1
                                          - リビジョンa2
                                          -     …
                              - ブランチb - リビジョンb1
                                          - リビジョンb2
                                          -     …
                "master"というブランチがデフォルトで生成される

・インデックス：commitの対象となるファイルの置き場
                "ステージングエリア"とも呼ばれる
                インデックスにファイルを登録する操作を"add"と呼ぶ

・ワーキングディレクトリ：リポジトリ(.gitディレクトリ)が存在するディレクトリ
                          "ワーキングツリー","作業ディレクトリ"などとも呼ばれる

・fetch：リモートリポジトリの現在の情報を取得する操作
         リモートリポジトリ内のブランチ名を指定してfetchを実行すると、
         ローカルに対象ブランチの複製ブランチ(リモート追跡ブランチ)が生成される
         リモート追跡ブランチとローカルブランチの内容を比較することで、
         リモートリポジトリ・ローカルリポジトリ間の差分が得られる

・merge：特定のリビジョンやブランチを、現在の作業ブランチに取り込む操作
         2つのブランチを1つに合流させる操作ともいえる

・conflict(衝突)：同じ箇所に異なった変更を加えた2つのブランチをmergeする際、発生するエラー

・rebase：以下の2つを指す
           -あるブランチでの変更内容を、別のブランチの末尾に付け足す操作
           -複数のコミット(リビジョン)を1つにまとめる操作
          更新ログを見やすくできる
          mergeと異なり、既存のコミットに影響を与えるため、共同開発においては安易に使用すべきでない
          まだpushされていない、ローカルの更新内容に対して使用することが好ましい
