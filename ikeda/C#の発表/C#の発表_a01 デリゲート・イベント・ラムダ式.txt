●デリゲート(delegate,代表させる,委任する)
引数と戻り値の型をセットとして定義した「メソッドの型」をdelegate型という
delegate型は以下のように定義される

	delegate (戻り値の型) (delegate型の名前)(引数リスト);

定義したdelegate型の変数を,「対応する型のメソッドの代表」として扱うことができる

 →説明_016

また,delegate型の変数には複数のメソッドを"+演算子"により登録したり"-演算子"により解除することができる(マルチキャスティング)
ただし,戻り値やoutパラメーターがあるメソッドを複数登録している場合,マルチキャスト時には最後に実行されるメソッドのもののみが返される

・delegate型は参照型変数である
・よく使われる形式のメソッドに対応するdelegate型は.NETで用意されている
   -"Action<T>型"は引数の型T,戻り値なしのメソッドに対応するdelegate型
     -引数は複数でもよい
     -単に"Action"とかけば,これば引数なし,戻り値なしのメソッドに対応するdelegate型を表す
   -"Func<TResult>型"は引数なし,戻り値の型TResultのメソッドに対応するdelegate型を表す
   -"Func<T,TResult>型"は,引数の型T,戻り値の型TResultのメソッドに対応するdelegate型を表す
     -引数は複数でもよい


●イベント
対象のプログラムの外側で発生する事象のことを"イベント"と呼ぶ
 例：キーボードのボタンが押される
     マウスがクリックされる
イベントに対してプログラム側が行う処理を"イベントハンドラー"と呼ぶ

C#では,既存のdelegate型と"eventキーワード"を用いることであるイベント発生時に呼び出すための(複数の)イベントハンドラーを定義できる

	event (delegate型名) (イベント名);

このようにして定義したイベントハンドラー(の組)を,単に"イベント"と呼ぶ
イベントへのメソッド(個々のイベントハンドラー)の登録は,delegateと同様に行える

	(イベント名) = (メソッド);
	(イベント名) += (追加するメソッド);

イベントのふるまいはほとんどdelegateのものと相違ないが,呼び出しやメソッド登録＆解除に掛けられる制限に関して両者は異なる
 -delegateは,宣言時に public または private を指定し,呼び出しと登録＆解除に対する制限を同時に設定することのみ可能
 -イベントの場合,その呼び出しは同じクラスの内部からのみ可能,登録＆解除は外部からでも可能,という制約がある
則ち,delegateとイベントの関係は,通常のフィールド変数とプロパティの関係に近いといえる
 -delegateでもプロパティは使用できるが,"+演算子"と"-演算子"によるメソッドの登録＆解除の操作が不可能になる


●ラムダ式
メソッドを簡略化した形式で表現する手段として,"ラムダ式"という機能がある
ラムダ式では,"ラムダ演算子=>"の左辺を右辺へ反映させる処理を行う
ラムダ式は"式形式のラムダ"と"ステートメント形式のラムダ"に分類される
定義されたラムダ式はdelegateに登録して扱える

 ・式形式のラムダ
    以下のように定義される

	(引数) => (式);

    このラムダ式は,左辺を引数として右辺の値を返すメソッドに対応する

 ・ステートメント形式のラムダ
    以下のように定義される

	(引数) => { (処理) };

    このラムダ式は,左辺を引数として右辺を実行するメソッドに対応する

 →説明_017

上記の例のように,ラムダ式では,処理のみが存在し,名前を持たないメソッドを定義できる
このようなメソッドを"匿名メソッド"と呼ぶ

ラムダ式は匿名メソッドの記述に限らず,一般のメソッド,コンストラクター,プロパティなどの記述にも応用できる

 →説明_018

ただし,delegateに登録された匿名メソッドの登録を直接解除することはできない点に注意する必要がある
