§8 ポリモーフィズム

●ポリモーフィズム(多態性)
各要素(変数,メソッドなど)が複数の型に属することを許す,という考え方
同じ規格に従う複数の要素を統一的に扱うことができる

C#においては,"継承"の概念により,ポリモーフィズムを実現している
以下では,継承に関わる要素として"抽象クラス","インターフェース"を紹介する


●抽象メソッドと抽象クラス
"abstractキーワード"を付与したメソッドは,オーバーライドが前提となったメソッドとしてはたらく
このようなメソッドを"抽象メソッド"と呼ぶ
抽象メソッドは実装(具体的な処理)を持たず,必ず派生クラスで処理が実装される

抽象メソッドを含むクラスを"抽象クラス"と呼び,宣言時はabstractキーワードが必要である
抽象クラスは,それを継承した派生クラスで実装されることが前提であり,抽象クラスのインスタンスを直接生成することはできない

・"sealedキーワード"を付与したクラスは,その継承が禁止される


●インターフェース
C#において,クラスの継承は単一継承しか許可されておらず,多重継承(複数のクラスから同時に要素を受け継ぐこと)は不可能である
一方で,"インターフェース"という機能を用いることで,クラスへの多重継承を行える
インターフェースは以下のように定義される

	interface (インターフェース名) { (メンバー) }

インターフェースの構造はクラスと似通っているが,次のような点で異なる
・フィールド(変数,定数)を定義できない
・抽象メンバーしか含めることができず,実装を書いても無視される
   -全てpublic abstractであるとみなされる(アクセス修飾子やabstractキーワードは不要)
   -メンバーにはメソッド,プロパティ,インデクサー,イベントが含まれる
   -C#8.0からは,「インターフェースのデフォルト実装」という機能により,インターフェースが実装を持つことができる(後述)

インターフェースを定義する際には,既存のインターフェースを(単一or多重)継承することができる
インターフェースからクラスへの継承は,クラス間の継承と同様に行える上,クラスとインターフェースを同時に継承することもできる

	例：class SampleClass : BaseClass, ITestInterface1, ITestInterface2 { (メンバーの記述) }

インターフェースは派生クラスへのアクセスの仕方を提供するものだといえる

[抽象クラスとインターフェースの違い]
・多重継承はインターフェースのみ可能
・抽象クラスは実装されたメソッドを持てる
・抽象クラスはフィールド(変数,定数)を持てる


●継承と型
以下では,継承元を「親」,継承先を「子」として説明する

一般に,子は親の持つメンバーを全て持ち,そこに独自のメンバーを追加で持っている

親 [abcde]
子 [abcde + fghijk]

そのため,子の型のインスタンスは,そのメンバーを一部無視することで,親の型のインスタンスだと思える

子インスタンス [abcde + fghijk]

                      ↓

               [abcde]

このようにして行われる子の型から親の型への型変換を"アップキャスト"という
また,アップキャストされて親の型となったインスタンスを再び子の型として扱う場合の型変換を"ダウンキャスト"という
 -ただし,親の型のインスタンスであっても,出自によっては自然なダウンキャストが行えない場合がある

    親 [abcde]                    ☆子2のインスタンスを親の型にアップキャストした場合
   子1 [abcde + fghijk]              ・子2の型へダウンキャスト可能
   子2 [abcde          + lmnop]      ・子1の型へはダウンキャストはできない

ダウンキャスト可能性については,"is演算子","as演算子"により判断される

	(親の型のインスタンス名) is 子 ： bool型を返す trueならダウンキャスト可能

	(親の型のインスタンス名) as 子 ： ダウンキャスト可能ならされる 不可能ならnullを返す

 ・インターフェースのデフォルト実装
     親インターフェースで実装された内容は通常無視されるが,子インスタンスを親インターフェースの型にアップキャストした場合は,
    親インターフェースの実装を参照できるようになる


●多態性の例
異なる型だが,同じように操作できるもの

 →説明_005(オーバーライドにより多態性を実現した例)
 →説明_006(隠蔽では多態性が失われるという例)

☆ToString
実は,C#上定義される全てのクラスはSystem.Objectというクラスを継承している
Objectクラスには以下のような仮想メソッドが定義されている

	public virtual string ToString () { (記述) }

このメソッドは,各派生クラスにおいて,自身のインスタンスを「文字列の形で表す」という処理によりオーバーライドされている

  例1：System.Int32は整数を表すクラスであり,Int32.ToStringメソッドではインスタンスの表す整数値を文字列に変換する処理が実装されている

  例2：System.DateTimeは日時を表す構造体であり,DateTime.ToStringメソッドではインスタンスの表す日時のうち,
       "年/月/日 時/分/秒"のみを文字列に変換する処理が実装されている
        -構造体：クラスと似た構造を持つが,クラスが参照型であるのに対し,構造体は値型である 詳しくは後述
