●C#とは
Microsoftが2000年に発表したプログラミング言語
・.NET Framework(,.NET Core)に対応している
・オブジェクト指向

	●.NET Framework
	Microsoftが開発した、アプリケーションの開発・実行環境
	以下からなる
	・プログラムの実行環境である"共通言語ランタイム(Common Launguage Runtime：CLR)"
	・オブジェクト指向に基づいたライブラリ
	   -ライブラリ：汎用性の高い複数のプログラムの集まり
	                他のプログラムに何らかの機能を提供する

	Windowsのみで動作する実行環境だったが、2014年に発表された".NET Core"はLinuxやmacOSでも
	動作する。


	●オブジェクト指向
	扱う対象やその機能を抽象化する考え方
	それらの定義を拡張・流用(継承)することで効率のよいコーディングを可能とする

	・複数の対象に共通した機能を実装できる
	・対象を「まとまり」で扱うため、コードの可読性が向上する
	   -細部の構造まで把握せずとも全体の動きが分かる
	   -多人数での開発に適している
	・対象への不用意な干渉を防ぐ"カプセル化"により、安全性が保障される


☆主要な言語の比較
C言語(1972～)：オブジェクト指向のための機能はない
               機械語に近く、メモリやハードウェアの制約に強い

 C++ (1983～)：C言語の上位互換に近い
               オブジェクト指向をサポートしているが、他の考え方に基づいたプログラミングも可能
               比較的機械語に近く、高速
               安全性は低い(エラーが起きやすい)

 Java(1994～)：C++をベースにした言語
               よりオブジェクト指向に特化した作りになっている
               安全性が高い(エラーが起きにくい)

  C# (2000～)：C++,Java,Delphiをベースにした言語



●C#プログラムの階層構造
C#で書かれた全てのプログラムは以下の階層構造をもつ

	名前空間 → クラス → メンバー(フィールド(変数),メソッド(処理)など)

・名前空間はコード上では省略可能
   -明示的に名前空間を指定しない場合、コンパイル時に自動的に既定の名前空間(グローバル名前空間)が
   追加され、定義したクラスは全てそこに所属される
・名前空間の内部に名前空間を埋め込むことができる
・プログラム内の各要素は、以下のように呼び出せる
	(名前空間).(クラス).(変数やメソッドなどの名称)

    例：System.Console.WriteLine("こんにちは");
