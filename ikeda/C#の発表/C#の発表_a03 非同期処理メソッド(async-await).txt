●非同期メソッド(async修飾子とawait演算子)
メソッドの定義時,戻り値の型を指定する前に"async修飾子"を付与したものを"非同期メソッド"という
 -ラムダ式では,引数の指定前にasyncを付与すれば非同期メソッドになる
 -エントリポイントであるMainメソッドにもasyncを付与できる
   -その場合は戻り値をTask型にする必要がある？？

非同期メソッドでは,「"await演算子"を前置したTask型」の処理を(別のスレッドで)行い,その完了状態への移行を待った上で以降の処理を行える
 -awaitで実行する処理は,必ずしも別スレッドで行われるわけではない https://qiita.com/tera1707/items/525538e1300f009486ea
   -awaitが実行されると,対象の処理が完了するまで現在のスレッドの処理を保留するが,保留中に別のタスクのために使用されることがある
 -await終了後の処理がどのスレッドで行われるかは状況による
   -必ずしも元のスレッドに復帰するわけではない
     -SynchronizationContext.Currentが復帰すべきスレッドを記憶している
       -コンソールアプリではnullとなっているため,復帰先がThreadPoolから(ランダムに)割り当てられる
       -GUIアプリではUIスレッドが記憶されており,毎回元のスレッドに復帰できる

 注意：非同期メソッドは"await"が使用可能なことを除けば通常メソッドとほとんど同じようにふるまう
       ただし,引数と戻り値には参照渡し(ref,out,inキーワード)を使用できない
        -非同期メソッド内で参照渡しを行う同期メソッドを呼び出すことはできる

非同期メソッドを定義する際には,その名前の最後に"Async"を追加する慣例がある
また,非同期メソッドの戻り値は Task<戻り値の型> (戻り値不要の場合は単にTask) としておく
 -戻り値voidだと,処理の終了が外部から検知できず,また,例外の補足もできないため,Task型(Task<T>型)にする必要がある
   -Task型は,その内部に「処理終了フラグ」「例外発生の有無と詳細」などの情報を持っている
   -戻り値  Task   → return文は不要(返すべきTaskが自動生成される)
   -戻り値 Task<T> → return (T型変数); が必要
                      T型戻り値は (非同期メソッドの戻り値Taskインスタンス).Result というプロパティにより得られる
                      また,
			(T型変数) = await (非同期メソッド);
		      としてもT型戻り値は得られる
   -ただし,イベントハンドラの場合はasync voidでもよい
     -実行結果を受け取る相手がいないため

 →説明_023
   -
 -非同期メソッドは,「その非同期メソッドの処理が終了したときに完了するTask」を内包する？？
 -非同期メソッドを(awaitやTask.Runを使わず)同期的に呼び出すと,その処理の完了を待たずに呼び出し元の処理が進んでしまう
   -一応非同期的には動いている


  〇非同期メソッドを利用するメリット
   ・同期処理の記述にasync-awaitを付与するなどの少しの修正だけで非同期処理を実現できる
   ・Task.Runとは異なり,部分的に別スレッドで処理を行いたい場合に重宝する
      -メインスレッドでしか行えない処理が存在するらしい
   ・非同期メソッドのために用意されたクラスライブラリ(非同期メソッド)を利用できる
      -例：StreamWriter.WriteLineAsyncメソッド
