●イベント
対象のプログラムの外側で発生する事象のことを"イベント"と呼ぶ
 例：キーボードのボタンが押される
     マウスがクリックされる
イベントに対してプログラム側が行う処理を"イベントハンドラー"と呼ぶ

C#では,既存のdelegate型と"eventキーワード"を用いることであるイベント発生時に呼び出すための(複数の)イベントハンドラーを定義できる

	event (delegate型名) (イベント名);

このようにして定義したイベントハンドラー(の組)を,単に"イベント"と呼ぶ
イベントへのメソッド(個々のイベントハンドラー)の登録は,delegateと同様に行える

	(イベント名) = (メソッド);
	(イベント名) += (追加するメソッド);

イベントのふるまいはほとんどdelegateのものと相違ないが,呼び出しやメソッド登録＆解除に掛けられる制限に関して両者は異なる
 -delegateは,宣言時に public または private を指定し,呼び出しと登録＆解除に対する制限を同時に設定することのみ可能
 -イベントの場合,その呼び出しは同じクラスの内部からのみ可能,登録＆解除は外部からでも可能,という制約がある
則ち,delegateとイベントの関係は,通常のフィールド変数とプロパティの関係に近いといえる
 -delegateでもプロパティは使用できるが,"+演算子"と"-演算子"によるメソッドの登録＆解除の操作が不可能になる


●非同期処理
プログラム内の処理に明確な順序があり,一つ一つの処理の終了を待ってから次に進む方式を同期処理(synchronous)という
 -これまで紹介したサンプルプログラムは全て同期処理のもの

一方で,複数の処理が並行して実行される方式を非同期処理(asynchronous)という
C#では,v5.0から"非同期メソッド"という機能が追加されるなど,非同期処理に役立つ機能が提供されている

・スレッド
プログラムの最小の実行単位をスレッド(Thread)という
スレッドは実際にCPUで実行される単位となる

・プロセス
OS上でプログラムを起動したときに作成される仮想的な領域をプロセス(Process)という
プロセスには仮想的にCPUやメモリが割り当てられて動作する？？
プロセスには一つ以上のスレッドが属しており,それぞれを非同期に実行することができる
 -マルチスレッド処理という
 -いくつのスレッドを同時に処理できるかは,CPUやOSの性能・機能による

・スレッドプール
スレッドの生成処理はOSに対して大きな負荷を掛ける
このため,既存のスレッドを破棄せずに再利用する"スレッドプール(ThreadPool)"という仕組みが考案された
ThreadPoolを用いた処理を行うには,扱いたいdelegateを「実行待ちQueue」に登録する必要がある
 -「実行待ちQueue」に存在するdelegateたちは,ThreadPool内の空いているThreadが順次割り当てられて処理される
 -登録には後述のThreadPoolクラスやTaskクラスを用いる

 図説：http://jsworld.jp/surasura/mgh?contentid=prg005p008

 →説明_019 System.Threading.ThreadPoolクラスのメソッドを利用してスレッドプールを扱う例


・タスク
C#においては,スレッドに代わる概念を表す単語
Taskクラス(System.Threading.Tasks.Task)というクラスにより,非同期処理のための機能が提供されている
https://docs.microsoft.com/ja-jp/dotnet/api/system.threading.tasks.task?view=netcore-3.1

Taskクラスのインスタンスは,非同期で実行させる処理(,仕事,タスク)一つ一つを表す
厳密には,戻り値のある処理にはTask<戻り値の型>クラスという派生クラスのインスタンスが対応する
その場合,実行結果は (インスタンス名).Result というプロパティにより得られる

Task.Run静的メソッドでは,与えられたdelegate型引数を「ThreadPoolによる実行待ちQueue」に登録する
その戻り値であるTask型インスタンスを用いることで,実行済み処理の結果を得ることができる

☆Task.Run(Action型変数)
   -Action型を非同期で実行したい場合に用いられる
   -Task型の戻り値を持つ

 →説明_020

☆Task.Run<戻り値の型>(Func<戻り値の型>)
   -戻り値のあるdelegateを非同期で実行したい場合に用いられる
   -Task<戻り値の型>型の戻り値を持つ

 →説明_021

☆(インスタンス名).IsCompletedプロパティ
   -処理中のタスクの完了or処理中を表すbool型プロパティ

 →説明_022


・非同期メソッド(async修飾子とawait演算子)
メソッドの定義時,戻り値の型を指定する前に"async修飾子"を付与したものを"非同期メソッド"という
 -ラムダ式では,引数の指定前にasyncを付与すれば非同期メソッドになる

非同期メソッドでは,「"await演算子"を前置したTask型」の処理を別のスレッドで行い,その完了状態への移行を待った上で処理を行える
非同期メソッドを定義する際には,その名前の最後に"Async"を追加する慣例がある
また,非同期メソッドの戻り値は Task<戻り値の型> (voidの場合は単にTask型) としておく
 -戻り値voidだと,処理の終了が外部から検知できず,また,例外の補足もできないため,Taskにする必要がある
 -対応するTask型変数に非同期メソッドの戻り値を代入する命令により,非同期メソッドが実行される

 →説明_023

  〇非同期メソッドを利用するメリット
   ・同期処理の記述にasync-awaitを付与するなどの少しの修正だけで非同期処理を実現できる
   ・Task.Runとは異なり,部分的に別スレッドで処理を行いたい場合に重宝する
      -メインスレッドでしか行えない処理が存在するらしい
   ・非同期メソッドのために用意されたクラスライブラリを利用できる
      -例：StreamWriter.WriteLineAsyncメソッド
