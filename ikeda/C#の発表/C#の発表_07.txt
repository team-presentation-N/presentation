●コレクション
同じ型のデータをまとめて管理するためのデータ構造を"コレクション"という
System.Collections名前空間に属するクラスや,System.Arrayクラスで定義されたものがそれに当たる

〇配列(System.Array)
 宣言時にデータの保管場所をヒープ領域に確保し,その場所一つ一つにインデックス(0以上の整数)を紐付ける
  -保存されるデータたちは直線的に整列され,インデックスとデータが一対一に対応する
    -データ代入時は,どのインデックスと紐付けるかを指定する

	var array = new int[5];      =>      { x, x, x, x, x }  長さ5の領域が確保される
	array[2] = 3;                =>      { x, x, 3, x, x }  インデックス[2]に対応する領域に値が代入される


〇リスト(System.Collections.Generic.List<T>)
 宣言時にそのサイズ(長さ)を定義する必要が無く,データ保存領域も最初に確保されるわけではない
  -データを書き込む際には「代入」ではなく「追加」や「挿入」の処理を行う
  -それぞれのデータには次の要素が何であるか(どのアドレスから始まる記述なのか)が紐付けられている

	var intlist = new List<int>();    =>   List<int>型のインスタンスが生成


	intlist.Add(2);                   =>   Address0x..1 { 2,   x   } ←Listの0番目

	                                       Listの中身："2"
                                               先頭の要素が追加される 次の要素は未定義


        intlist.Add(5);                   =>   Address0x..1 { 2, 0x..3 } ←0番目
                                               Address0x..3 { 5,   x   } ←1番目

	                                       Listの中身："2","5"
	                                       次の要素(1番目)がListの末尾に追加され,先頭の要素に対応するアドレスが紐付けられる


	intlist.Insert(1,3);              =>   Address0x..1 { 2, 0x..6 } ←0番目
                                               Address0x..3 { 5,   x   } ←2番目
                                               Address0x..6 { 3, 0x..3 } ←1番目

	                                       Listの中身："2","3","5"
	                                       新しい"3"という整数が,Listの1番目に挿入される
                                               0番目の要素から見た「次の要素」が変更されるので,それを示すアドレスが変更される

 配列とはデータ書き込みの方法が異なるが,Listもデータを直線的に並べるデータ構造であり,配列と同様にインデックスの概念がある


〇ディクショナリー(System.Collections.Generic.Dictionary<T>)
 保存したいデータの値(value)とキー(key)を紐づけて管理するデータ構造をDictionary(Hashtable)という
 使用するkeyの型もユーザーが指定できる
  -keyの定め方によっては直線的ではないデータ構造となる

	var floatdict = new Dictionary<string, float>();   =>    文字列をkeyとし,float型の値を格納するDictionaryを生成

        floatdict.Add("円周率", 3.141F);                   =>    "3.141"というfloat型の値を"円周率"という文字列型のkeyと紐付けて格納

	floatdict.Add("自然対数の底", 2.718F);             =>    値"2.718"にkey"自然対数の底"を付加して格納

	Console.WriteLine(floatdict["円周率"]);            =>    辞書内のkey"円周率"に対応する値"3.141"が出力される

 →説明_015


〇スタック(System.Collections.Generic.Stack<T>)
 後入れ先出し(LIFO,Last In First Out)と呼ばれるデータ構造で,最後に格納したデータから順に取り出される

 Pushメソッドにより最後尾にデータを追加でき,PopメソッドやPeekメソッドにより最後尾のデータを取得できる
 Popメソッドにより取得されたデータはStackから削除されるが,Peekメソッドでは取得のみ行われる


〇キュー(System.Collections.Generic.Queue<T>)
 先入れ先出し(FIFO,First In First Out)と呼ばれるデータ構造で,先に格納したデータから順に取り出される

 Enqueueメソッドにより最後尾にデータを追加でき,DequeueメソッドやPeekメソッドにより先頭のデータを取得できる
 Dequeueメソッドにより取得されたデータはQueueから削除されるが,Peekメソッドでは取得のみ行われる


・System.Collections.Genericの各クラスは"ジェネリック"という機能により定義されており,あらゆる型の値やkeyを扱える
