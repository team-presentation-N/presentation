●ファイル出力
System.IO名前空間のメソッドを用いる
・File.WriteAllTextメソッド
   Path,文字列を渡すとファイルを出力する
   既に存在するファイル名を指定した場合は上書きされる

・File.AppendAllTextメソッド
   上の追記バージョン

   注意：文字列の中で Environment.NewLine を用いることで,実行環境に依らずに改行コードを出力できる


●ファイルからの入力
System.IO名前空間を用いる
・File.ReadAllTextメソッド
   Pathを渡すとそのファイルの中身がstringで返される
   必要ならばエンコードも指定できる

・File.ReadAllLinesメソッド
   ファイルが行ごとにstringに格納されたstring[]が返される

・StreamReaderクラス
   コンストラクターにファイルPathを渡し,インスタンス化して用いる
   ファイルを先頭から読み込むメソッドを持つ
   インスタンスに「現在の読み込み位置」の概念があるのが特徴
    -ReadLine  現在位置から1行分(次の改行かEOFまで)を読み取り,stringで返す
    -ReadToEnd 現在位置からEOFまでを読み取り,stringで返す
    -Read      現在位置から1文字(or指定した文字数)を読み込み,int(asciiコードorChar[])で返す
    -Close     ファイルを閉じる


●他のスレッドで使用されているファイルを開く
FileStreamクラスのコンストラクター(String, FileMode, FileAccess, FileShare)により,読み取り権限を持たせたStreamオブジェクトを生成する必要がある


●非同期的な入出力
専用の非同期メソッドが用意されている
 [例]
   System.IO.StreamReaderクラス ReadLineAsync / ReadToEndAsync
   System.IO.StreamWriterクラス WriteAsync / WriteLineAsync

また,Parallelクラスのメソッド(ForEach)により,複数のStreamを同時に扱える


●リソースの自動開放
通常,インスタンス化されたオブジェクト(マネージド リソース)はGarbage Collectionにより管理され,自動で破棄される
一方で,ファイルなどの一部のオブジェクト(アンマネージド リソース)は,ユーザー側で明示的に破棄を行う必要がある
 [例]FileStream.Close()

IDisposableインターフェースを実装するクラスのオブジェクトを扱う際には,"usingステートメント"を利用することができ,
これによりリソースの破棄用のIL(Microsoft Intermediate Language,中間言語)が自動生成される

 [例]
   using (FileStream fs = new FileStream( ファイルPathなどの引数 ))
   {
      //処理
   }

C#8.0からは簡略化されたusingステートメントが利用できる
変数宣言の左辺にusingを付与すればよい

 [例]
   using var fs = new FileStream( 引数 )
   {
      //処理
   }
